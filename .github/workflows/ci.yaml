name: ci.yaml

on:
  push:
    branches:
      - main
env:
  # replace the command inside the "" you want
  # e.g. python test: "python manage.py test flight.tests.issues.test_issue_711"
  # e.g. coverage cmd: "coverage run --source=flight,group manage.py test flight.tests.issues.test_issue_711"
  test_command: |
    coverage run --source=./app -m pytest ./app/tests/test_apis.py
  coverage_grade: 80
jobs:
  check-format:
    runs-on: ubuntu-22.04
    steps:
      - uses: actions/checkout@v4

      - name: Black Check
        uses: psf/black@stable
        with:
          options: "--check --fast"
          src: "."
          version: "~= 23.10"

  check-if-continue-test:
    needs: check-format
    runs-on: ubuntu-22.04
    outputs:
      test_command: ${{ steps.init.outputs.test_command }}
    steps:
      - name: Make environment variables global
        id: init
        run: |
          echo "test_command=${{ env.test_command }}" >> $GITHUB_OUTPUT

  run-test-and-coverage:
    runs-on: ubuntu-22.04
    needs: check-if-continue-test
    if: ${{ needs.check-if-continue-test.outputs.test_command != '' }}

    defaults:
      run:
        working-directory: ./mysite

    strategy:
      fail-fast: false
      matrix:
        os: [ Ubuntu ]
        python_version: [ "3.12" ]

    steps:
      - uses: actions/checkout@v4

      - name: Set up Python ${{ matrix.python_version }}
        uses: actions/setup-python@v5
        with:
          python-version: "${{ matrix.python_version }}"
          cache: 'pip'
          cache-dependency-path: '**/*requirements.txt'

      - name: Install Packages
        run: |
          sudo apt-get update
          sudo apt-get install gettext pkg-config libxml2-dev libxmlsec1-dev libxmlsec1-openssl

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install coverage
          pip install -r ../requirements.txt

      - name: Django Setup
        run: |
          mkdir media
          python manage.py migrate

      - name: Run Django Test and Coverage
        run: |
          set +e

          test_command=${{ env.test_command }}
          coverage_grade=${{ env.coverage_grade }}

          if [[ -z "$test_command" ]]; then
            echo "No test and exist"
            echo "No test and exist" >> $GITHUB_STEP_SUMMARY
            exit 0
          fi

          test_result=$(yes "yes" | eval "$test_command" 2>&1)
          exit_code=$?
          echo "${test_result}"
          echo "test result: " >> $GITHUB_STEP_SUMMARY
          echo "\`\`\`test result: " >> $GITHUB_STEP_SUMMARY
          echo "${test_result}" >> $GITHUB_STEP_SUMMARY
          echo "\`\`\`" >> $GITHUB_STEP_SUMMARY

          if [[ $test_command == coverage* ]] && [[ $exit_code -eq 0 ]]; then
            coverage_result=$(coverage report --fail-under=$coverage_grade)
            exit_code=$?
            echo "${coverage_result}"
            echo "coverage result: " >> $GITHUB_STEP_SUMMARY
            echo "\`\`\`coverage result: " >> $GITHUB_STEP_SUMMARY
            echo "${coverage_result}" >> $GITHUB_STEP_SUMMARY
            echo "\`\`\`" >> $GITHUB_STEP_SUMMARY
          fi

          exit ${exit_code}
